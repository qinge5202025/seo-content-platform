// SEO内容生成平台 - Prisma数据库模型
// 这是Prisma schema文件，定义了数据库结构和关系

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================================
// 👤 用户管理模块
// ===========================================

model User {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String    @unique @db.VarChar(255)
  passwordHash    String    @map("password_hash") @db.VarChar(255)
  name            String    @db.VarChar(100)
  avatarUrl       String?   @map("avatar_url")
  plan            Plan      @default(FREE)
  status          UserStatus @default(ACTIVE)
  emailVerified   Boolean   @default(false) @map("email_verified")
  emailVerifiedAt DateTime? @map("email_verified_at")
  lastLoginAt     DateTime? @map("last_login_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // 关联关系
  profile         UserProfile?
  quotas          UserQuota[]
  articles        Article[]
  generationTasks GenerationTask[]
  refreshTokens   RefreshToken[]
  auditLogs       AuditLog[]
  createdTemplates GenerationTemplate[] @relation("TemplateCreator")

  @@map("users")
  @@index([email])
  @@index([plan])
  @@index([status])
  @@index([createdAt])
}

model UserProfile {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @unique @map("user_id") @db.Uuid
  company     String?  @db.VarChar(100)
  website     String?  @db.VarChar(255)
  bio         String?
  timezone    String   @default("UTC") @db.VarChar(50)
  language    String   @default("zh-CN") @db.VarChar(10)
  preferences Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserQuota {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  quotaType   String      @map("quota_type") @db.VarChar(50)
  usedCount   Int         @default(0) @map("used_count")
  limitCount  Int         @map("limit_count")
  resetPeriod ResetPeriod @default(MONTHLY) @map("reset_period")
  lastResetAt DateTime    @default(now()) @map("last_reset_at")
  nextResetAt DateTime    @map("next_reset_at")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, quotaType])
  @@map("user_quotas")
  @@index([nextResetAt])
}

// ===========================================
// 📝 内容管理模块
// ===========================================

model Article {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String        @map("user_id") @db.Uuid
  title           String        @db.VarChar(500)
  content         String
  excerpt         String?
  type            ArticleType
  status          ArticleStatus @default(DRAFT)
  metaTitle       String?       @map("meta_title") @db.VarChar(60)
  metaDescription String?       @map("meta_description") @db.VarChar(160)
  slug            String?       @unique @db.VarChar(255)
  wordCount       Int           @default(0) @map("word_count")
  readingTime     Int           @default(0) @map("reading_time")
  seoScore        Int           @default(0) @map("seo_score")
  publishedAt     DateTime?     @map("published_at")
  scheduledAt     DateTime?     @map("scheduled_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // 关联关系
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  keywords        ArticleKeyword[]
  tags            ArticleTag[]
  categories      ArticleCategory[]
  seoAnalyses     SeoAnalysis[]
  keywordRankings KeywordRanking[]
  generationTasks GenerationTask[]

  @@map("articles")
  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([publishedAt])
  @@index([createdAt])
  @@index([seoScore])
  @@index([userId, status, type])
  @@index([userId, createdAt(sort: Desc)])
  @@index([status, seoScore(sort: Desc)])
}

model ArticleKeyword {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  articleId String   @map("article_id") @db.Uuid
  keyword   String   @db.VarChar(100)
  density   Decimal  @default(0.00) @db.Decimal(5, 2)
  isPrimary Boolean  @default(false) @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at")

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_keywords")
  @@index([articleId])
  @@index([keyword])
  @@index([isPrimary])
}

model Tag {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @unique @db.VarChar(50)
  slug        String       @unique @db.VarChar(50)
  description String?
  color       String       @default("#1890ff") @db.VarChar(7)
  usageCount  Int          @default(0) @map("usage_count")
  createdAt   DateTime     @default(now()) @map("created_at")

  articles ArticleTag[]

  @@map("tags")
  @@index([name])
  @@index([usageCount])
}

model ArticleTag {
  articleId String   @map("article_id") @db.Uuid
  tagId     String   @map("tag_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tags")
}

model Category {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String            @db.VarChar(100)
  slug        String            @unique @db.VarChar(100)
  description String?
  parentId    String?           @map("parent_id") @db.Uuid
  sortOrder   Int               @default(0) @map("sort_order")
  isActive    Boolean           @default(true) @map("is_active")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  // 自关联关系
  parent   Category?          @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[]         @relation("CategoryHierarchy")
  articles ArticleCategory[]

  @@map("categories")
  @@index([parentId])
  @@index([slug])
}

model ArticleCategory {
  articleId  String   @map("article_id") @db.Uuid
  categoryId String   @map("category_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")

  article  Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([articleId, categoryId])
  @@map("article_categories")
}

// ===========================================
// 🤖 AI生成模块
// ===========================================

model GenerationTask {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String     @map("user_id") @db.Uuid
  taskType       TaskType   @map("task_type")
  status         TaskStatus @default(PENDING)
  inputParams    Json       @map("input_params")
  resultArticleId String?   @map("result_article_id") @db.Uuid
  errorMessage   String?    @map("error_message")
  processingTime Int?       @map("processing_time")
  tokensUsed     Int?       @map("tokens_used")
  costAmount     Decimal?   @map("cost_amount") @db.Decimal(10, 4)
  startedAt      DateTime?  @map("started_at")
  completedAt    DateTime?  @map("completed_at")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resultArticle Article? @relation(fields: [resultArticleId], references: [id])

  @@map("generation_tasks")
  @@index([userId])
  @@index([status])
  @@index([taskType])
  @@index([createdAt])
  @@index([userId, status])
  @@index([taskType, createdAt(sort: Desc)])
}

model GenerationTemplate {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String   @db.VarChar(100)
  type          TaskType
  description   String?
  promptTemplate String  @map("prompt_template")
  defaultParams Json     @default("{}") @map("default_params")
  isActive      Boolean  @default(true) @map("is_active")
  usageCount    Int      @default(0) @map("usage_count")
  createdBy     String?  @map("created_by") @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  creator User? @relation("TemplateCreator", fields: [createdBy], references: [id])

  @@map("generation_templates")
  @@index([type])
  @@index([isActive])
}

// ===========================================
// 🔍 SEO分析模块
// ===========================================

model SeoAnalysis {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  articleId             String   @map("article_id") @db.Uuid
  overallScore          Int      @map("overall_score")
  titleScore            Int?     @map("title_score")
  metaDescriptionScore  Int?     @map("meta_description_score")
  keywordScore          Int?     @map("keyword_score")
  contentScore          Int?     @map("content_score")
  structureScore        Int?     @map("structure_score")
  readabilityScore      Int?     @map("readability_score")
  analysisDetails       Json     @map("analysis_details")
  recommendations       Json     @default("[]") @map("recommendations")
  analyzerVersion       String   @default("1.0") @map("analyzer_version") @db.VarChar(20)
  createdAt             DateTime @default(now()) @map("created_at")

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("seo_analyses")
  @@index([articleId])
  @@index([overallScore])
  @@index([createdAt])
  @@index([articleId, createdAt(sort: Desc)])
}

model KeywordRanking {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  articleId        String       @map("article_id") @db.Uuid
  keyword          String       @db.VarChar(100)
  searchEngine     SearchEngine @default(GOOGLE) @map("search_engine")
  rankingPosition  Int?         @map("ranking_position")
  searchVolume     Int?         @map("search_volume")
  competitionLevel CompetitionLevel? @map("competition_level")
  trackedDate      DateTime     @map("tracked_date") @db.Date
  createdAt        DateTime     @default(now()) @map("created_at")

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([articleId, keyword, searchEngine, trackedDate])
  @@map("keyword_rankings")
  @@index([articleId])
  @@index([keyword])
  @@index([trackedDate])
  @@index([keyword, trackedDate(sort: Desc)])
}

// ===========================================
// 🔐 系统管理模块
// ===========================================

model RefreshToken {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  tokenHash  String   @map("token_hash") @db.VarChar(255)
  expiresAt  DateTime @map("expires_at")
  isRevoked  Boolean  @default(false) @map("is_revoked")
  deviceInfo Json?    @map("device_info")
  createdAt  DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([userId])
  @@index([expiresAt])
  @@index([isRevoked])
}

model AuditLog {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String?  @map("user_id") @db.Uuid
  action       String   @db.VarChar(100)
  resourceType String   @map("resource_type") @db.VarChar(50)
  resourceId   String?  @map("resource_id") @db.Uuid
  oldValues    Json?    @map("old_values")
  newValues    Json?    @map("new_values")
  ipAddress    String?  @map("ip_address") @db.Inet
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([resourceType, resourceId])
  @@index([createdAt])
}

model SystemSetting {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String   @unique @db.VarChar(100)
  value       Json
  description String?
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
  @@index([key])
  @@index([isPublic])
}

// ===========================================
// 📊 枚举定义
// ===========================================

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum ResetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ArticleType {
  REVIEW
  TOP_LIST
  COMPARISON
  GUIDE
  NEWS
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum TaskType {
  REVIEW
  TOP_LIST
  COMPARISON
  GUIDE
}

enum TaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum SearchEngine {
  GOOGLE
  BAIDU
  BING
}

enum CompetitionLevel {
  LOW
  MEDIUM
  HIGH
}